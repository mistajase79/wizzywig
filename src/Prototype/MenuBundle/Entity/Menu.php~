<?php

namespace Prototype\MenuBundle\Entity;

use Gedmo\Mapping\Annotation as Gedmo;
use Doctrine\ORM\Mapping as ORM;
use Gedmo\Translatable\Translatable;
use Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntity;
use Symfony\Component\Validator\Constraints as Assert;
use Prototype\PageBundle\Custom\Custom;

/**
 * News
 *
 * @ORM\Table(name="menus")
 * @ORM\Entity(repositoryClass="Prototype\MenuBundle\Repository\MenuRepository")
 */
class Menu
{
    /**
     * @var int
     *
     * @ORM\Column(name="id", type="integer")
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    private $id;

    /**
     * @var string
     * @Assert\NotBlank(message="The Identifier should not be blank")
     * @ORM\Column(name="identifier", type="string", length=255)
     */
    private $identifier;


    private $menu_json;

    /**
     * @var \DateTime
     *
     * @ORM\Column(name="created_at", type="datetime")
     * @Gedmo\Timestampable(on="create")
     * @ORM\Column(type="datetime")
     */
    private $createdAt;

    /**
     * @var \DateTime
     * @Gedmo\Timestampable(on="update")
     * @ORM\Column(type="datetime")
     */
    private $updatedAt;

	/**
	 * @ORM\Column(type="boolean", nullable=false)
	 */
	private $active = true;
	/**
	  * @ORM\Column(type="boolean", nullable=false)
	 */
	private $deleted = false;

	/**
  * @Gedmo\Blameable(on="update")
  * @Gedmo\Blameable(on="create")
  * @ORM\ManyToOne(targetEntity="Prototype\UserBundle\Entity\User", inversedBy="menuupdated")
  * @ORM\JoinColumn(name="update_by", referencedColumnName="id")
  */
	private $updatedBy;


	/**
  * @ORM\OneToMany(targetEntity="Prototype\MenuBundle\Entity\MenuItems", mappedBy="menuId")
  */
	private $menu_items;

	  public function __toString(){
		return $this->getIdentifier();
	  }



    /**
     * Get id
     *
     * @return integer
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set identifier
     *
     * @param string $identifier
     * @return Menu
     */
    public function setIdentifier($identifier)
    {
        $this->identifier = $identifier;

        return $this;
    }

    /**
     * Get identifier
     *
     * @return string
     */
    public function getIdentifier()
    {
        return $this->identifier;
    }

    /**
     * Set menu_items
     *
     * @param array $menuItems
     * @return Menu
     */
    public function setMenuItems($menuItems)
    {
        $this->menu_items = $menuItems;

        return $this;
    }

    /**
     * Get menu_items
     *
     * @return array
     */
    public function getMenuItems()
    {
        return $this->menu_items;
    }

    /**
     * Set createdAt
     *
     * @param \DateTime $createdAt
     * @return Menu
     */
    public function setCreatedAt($createdAt)
    {
        $this->createdAt = $createdAt;

        return $this;
    }

    /**
     * Get createdAt
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->createdAt;
    }

    /**
     * Set updatedAt
     *
     * @param \DateTime $updatedAt
     * @return Menu
     */
    public function setUpdatedAt($updatedAt)
    {
        $this->updatedAt = $updatedAt;

        return $this;
    }

    /**
     * Get updatedAt
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->updatedAt;
    }

    /**
     * Set updatedBy
     *
     * @param \Prototype\UserBundle\Entity\User $updatedBy
     * @return Menu
     */
    public function setUpdatedBy(\Prototype\UserBundle\Entity\User $updatedBy = null)
    {
        $this->updatedBy = $updatedBy;

        return $this;
    }

    /**
     * Get updatedBy
     *
     * @return \Prototype\UserBundle\Entity\User
     */
    public function getUpdatedBy()
    {
        return $this->updatedBy;
    }

    /**
     * Set active
     *
     * @param boolean $active
     * @return Menu
     */
    public function setActive($active)
    {
        $this->active = $active;

        return $this;
    }

    /**
     * Get active
     *
     * @return boolean
     */
    public function getActive()
    {
        return $this->active;
    }

    /**
     * Set deleted
     *
     * @param boolean $deleted
     * @return Menu
     */
    public function setDeleted($deleted)
    {
        $this->deleted = $deleted;

        return $this;
    }

    /**
     * Get deleted
     *
     * @return boolean
     */
    public function getDeleted()
    {
        return $this->deleted;
    }
}
