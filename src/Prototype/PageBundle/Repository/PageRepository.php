<?php

namespace Prototype\PageBundle\Repository;

use Doctrine\ORM\EntityRepository;
/**
 * PageRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PageRepository extends \Doctrine\ORM\EntityRepository
{

	public function getComponentPageByURLBrackets(){


		$query = $this->getEntityManager()
            ->createQuery(
                'SELECT page FROM PrototypePageBundle:Page page WHERE page.slug LIKE :bracket '
            );
		$query->setParameter('bracket', '%{%');

        $results = $query->getResult();



		return $results;
	}


	public function findAllByLocale($locale = 'en')
   {
	   //Make a Select query
	   $qb = $this->createQueryBuilder('a');
	   $qb->select('a.id, a.slug');

	   // Use Translation Walker
	   $query = $qb->getQuery();
	   $query->setHint(
		   \Doctrine\ORM\Query::HINT_CUSTOM_OUTPUT_WALKER,
		   'Gedmo\\Translatable\\Query\\TreeWalker\\TranslationWalker'
	   );
	   // Force the locale
	   $query->setHint(
		   \Gedmo\Translatable\TranslatableListener::HINT_TRANSLATABLE_LOCALE,
		   $locale
	   );
	   return serialize($query->getArrayResult());
   }




	public function getPageByTranslatableSlug($locale, $slug){

		$result = $this->getEntityManager()
				->createQuery(
						'SELECT page FROM PrototypePageBundle:Page page WHERE page.slug = :slug')
					->setParameter('slug', $slug)
					->setHint(
						\Doctrine\ORM\Query::HINT_CUSTOM_OUTPUT_WALKER,
						'Gedmo\\Translatable\\Query\\TreeWalker\\TranslationWalker')
					//->setHint(\Gedmo\Translatable\TranslatableListener::HINT_FALLBACK, 1)
					->getSingleResult();

		return $result;
	}


    public function getInheritedBundleName($bundleprefix){

        $qb = $this->createQueryBuilder('c');
        $qb->select('c')
            ->innerJoin('c.template', 'p')
            ->where('p.inherited_bundle_name = :bundleprefix');

        $qb->setParameters(array(
                'bundleprefix' => $bundleprefix
            ));

        $query = $qb->getQuery();
        $result = $query->getOneOrNullResult();
        return $result;
    }

}
